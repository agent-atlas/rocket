volumes:
  rocketchat-uploads:
  rocketchat-custom-scripts:
  traefik-certificates:
  rocketchat-mongodb:

networks:
  proxy:
    external: true
  wg-internal:
    internal: true
    ipam:
      config:
        - subnet: 10.8.1.0/24

services:
  mongodb:
    hostname: mongodb
    container_name: mongodb
    image: bitnami/mongodb:5.0
    volumes:
     - rocketchat-mongodb:/bitnami/mongodb
    environment:
      MONGODB_ENABLE_JOURNAL: ${MONGODB_ENABLE_JOURNAL}
      MONGODB_USERNAME: ${MONGODB_ADMIN_USERNAME}
      MONGODB_PASSWORD: ${MONGODB_ADMIN_PASSWORD}
      MONGODB_DATABASE: ${MONGODB_DATABASE}
      MONGODB_ROOT_PASSWORD: ${MONGODB_ADMIN_PASSWORD}
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongodb:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      wg-internal:
        ipv4_address: 10.8.1.4
    dns:
      - 10.8.1.10

  rocketchat-logout:
    build: 
      context: ./logout
    environment:
      ROCKETCHAT_URL: ${ROCKETCHAT_URL}
      ROCKETCHAT_USER: ${ROCKETCHAT_USER}
      ROCKETCHAT_PASSWORD: ${ROCKETCHAT_PASSWORD}
      LOGOUT_LIMIT: ${LOGOUT_LIMIT}
      SLEEP_TIME: ${SLEEP_TIME}
    restart: always
    depends_on:
      rocketchat:
        condition: service_healthy
    networks:
      wg-internal:
        ipv4_address: 10.8.1.5

    dns:
      - 10.8.1.10

  rocketchat:
    image: rocket.chat:5.0
    container_name: ${ROCKETCHAT_HOSTNAME}
    volumes:
      - rocketchat-uploads:/app/uploads
      - rocketchat-custom-scripts:/app/custom_scripts
    environment:
      PORT: ${ROCKETCHAT_PORT}
      ROOT_URL: ${ROCKETCHAT_URL}
      MONGO_URL: ${MONGO_URL}
      MONGO_OPLOG_URL: ${MONGO_OPLOG_URL}
      DEPLOY_METHOD: docker
#      Test 2 params
      Accounts_UseDNSDomainCheck: 'false'
      Accounts_RegistrationForm: 'disabled'
      OVERWRITE_SETTING_Accounts_LoginExpiration: 1
      OVERWRITE_SETTING_Accounts_Default_User_Preferences_enableAutoAway: true
      OVERWRITE_SETTING_Accounts_Default_User_Preferences_idleTimeLimit: 120
      OVERWRITE_SETTING_Accounts_ForgetUserSessionOnWindowClose: true
      OVERWRITE_SETTING_Accounts_TwoFactorAuthenticationEnabled: false
#      ADMIN_USERNAME: ${ADMIN_USERNAME}
#      ADMIN_NAME: ${ADMIN_USERNAME}
#      ADMIN_PASS: ${ADMIN_PASSWORD}
#      ADMIN_EMAIL: ${ADMIN_EMAIL}
      DISABLE_ANONYMOUS_READ: true
      DISABLE_ANONYMOUS_WRITE: true
    healthcheck:
      test: >
         /usr/local/bin/node -e '
         const http = require("http");
         const options = {
           host: "localhost",
           port: 80,
           path: "/api/info",
           timeout: 2000
         };
         const healthCheck = http.request(options, (res) => {
           console.log(`HEALTHCHECK STATUS: $${res.statusCode}`);
           if (res.statusCode == 200) {
             process.exit(0);
           } else {
             process.exit(1);
           }
         });
         healthCheck.on("error", function (err) {
           console.error("ERROR");
           process.exit(1);
         });
         healthCheck.end();'
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      wg-internal:
        ipv4_address: 10.8.1.3

    dns:
      - 10.8.1.10

  wg-easy:
    image: weejewel/wg-easy
    container_name: wg-easy
#    volumes:
#      - ./conf/etc/wireguard:/etc/wireguard
    environment:
      WG_HOST: 79.137.248.164
      PASSWORD: foobar123
      WG_PORT: 51820
      WG_DEFAULT_ADDRESS: 10.10.10.x
      WG_ALLOWED_IPS: 10.10.10.0/24,10.8.0.0/24,10.8.1.0/24
      WG_PRE_UP: >
        iptables -t nat -A POSTROUTING -d 10.8.1.0/24 -j MASQUERADE
      WG_PERSISTENT_KEEPALIVE: 600
      WG_DEFAULT_DNS: 10.8.1.10

      WG_POST_UP: >
        iptables -A FORWARD -i wg0 -o eth1 -j ACCEPT;
        iptables -A FORWARD -i eth1 -o wg0 -m state --state RELATED,ESTABLISHED -j ACCEPT;
        iptables -t nat -A POSTROUTING -o eth1 -j MASQUERADE;
      # - WG_MTU=1420
      # - WG_PRE_UP=echo "Pre Up" > /etc/wireguard/pre-up.txt
      # - WG_POST_UP=echo "Post Up" > /etc/wireguard/post-up.txt
      # - WG_PRE_DOWN=echo "Pre Down" > /etc/wireguard/pre-down.txt
      # - WG_POST_DOWN=echo "Post Doports:
        #      - "51820:51820/udp"
        #      - "51821:51821/tcp"
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
    - net.ipv4.ip_forward=1
    - net.ipv4.conf.all.src_valid_mark=1
    ports:
    - 51820:51820/udp
    - 51821:51821/tcp
    deploy:
      labels:
        io.portainerhack.cap_add: NET_ADMIN,SYS_MODULE
    networks:
      proxy:
      wg-internal:
        ipv4_address: 10.8.1.2

  coredns:
    image: coredns/coredns:latest
    container_name: coredns
    restart: unless-stopped
    volumes:
        - ./conf/etc/coredns:/etc/coredns
    command: "-conf /etc/coredns/Corefile"
    networks:
      proxy:
      wg-internal:
        ipv4_address: 10.8.1.10